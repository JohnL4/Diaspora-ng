* Using FireBase (NoSQL database).

** Authentication
   
  Default rules require authentication.  I'm not comfortable leaving the database world-writable, so I figured out how
  to authenticate.

  It's kind of wacky (like all this stuff on the web).  The recommended method is redirect (on mobile, anyway, and I
  didn't want to make two logic paths).  On a redirect, you can wind up throwing away all your state (since you browse
  to a different site and browse back, essentially), so I jammed the cluster xml into localStorage.  (a) You can only
  store strings in localStorage, and (b) localStorage as a web standard seems to have been around long enough for all
  the major browsers to implement it.

  To find out which user is currently logged (if any), you have to set up an event listener for the "auth changed" event
  in Firebase, even when you're first loading the page.  That's how Firebase delivers the initial snapshot of current
  state.

  (The same is true for database reads, by the way.  I wonder how common a paradigm that is.)

** Database

*** Structure

    (Note: new structure is at [[#structure-2][New structure]] in these notes.)

    Don't want to inhale the entire database when first loading the app.  We just need a list of clusters, and then
    details for each cluster.

    Looks like we can't represent arrays directly in NoSQL, so we do it by having multiple children
    at a node.

**** Old structure
     
    *(The following is replaced by [[#structure-2][New structure]].)*

    #+BEGIN_SRC indented-text
      root:
         users                        
            <user>                    # uid
               name: string
               email: string
               lastLogin: date
         clusters                     # Data whose size is more-or-less bounded -- just simple data items.
            <uniqueClusterName>       # Make unique by appending uid of creating user?
               [lastEditedByUser: uid] # Note that this isn't actually needed, since the UID is part of the uniqueClusterName.
               lastEditedDate: Date
               notes: string
         clusterData                  # "Scalable" data -- unbounded lists, large-ish XML, etc.
            <uniqueClusterName>       # Append uid to make unique.
               xml: xml string        # XML of the cluster
               owners                 # Users who are allowed to change sharing.  Initially, the uid of the creating user.
                  <owner>             # uid
                  (repeated)
               editors                # Users allowed to edit this cluster.  Owners always allowed to edit, so don't need to
                                      # include them in this list.
                  <user>              # uid; Need a special value indicating "all users".
                  (repeated)
               viewers                # Users allowed to see this cluster
                  <user>
                  (repeated)
    #+END_SRC

**** Security (incl. new structure)

     - Viewers :: Read permissions
     - Editors :: Write permissions, but only to data, not lists of users
     - Owners :: Write permissions, /including/ to lists of users

***** TODO Screen for sharing that lists available users

      Don't disclose UIDs unnecessarily.

      Need to be able to set "world" as share target.
      
***** TODO Proposed d/b structure

****** Current
      
      - users :: private user data, like email addresses
      - usersPublic :: public user data, like usernames (*NOTE:* This was added (see below) and is
           now "current").
      - clusters :: metadata, like who last edited and when (and cluster names and notes, which,
           btw, should be part of the XML, too).
      - clusterData :: XML and other data too expensive to return all at once as part of clusters.

****** Requirements (or Operations and Governing Rules)

******* Unique name

        Once created, a cluster's unique name will never change, even if... maybe I should just have
        a guid.

        Cluster has null uuid on creation.  If null, create during save and never lose.  Change
        "unique name" to uuid implementation.

******* Create
        
      Any fool can create (not overwrite).  When they do, they become owners.  (TODO: something about =newdata= vs. old
      data?)

      *Rule:* NewData key doesn't exist yet

******* Read
        
      Anyone can view (read) if they're listed under =clusterData/viewers= (TODO: does this affect /listing/ cluster
      nodes? Answer: listing is allowed if the node corresponding to the list (i.e., the parent node of all the
      children) is readable, regardless of the children's individual status.  Conversely, if the parent node is not
      readable, listing is not allowed, even though child nodes may be readable (in which case, those children can be
      read individually. traversing through the parent node in spite of the fact that it cannot be read.)

      *Rule:* current user uid is in list of viewers for cluster

******** List available clusters

         List of clusters available for reading/editing/sharing must be in users/$uid/clusters
         node.  So I don't think there's a rule-based approach to this (except /users/$uid must
         match current user uid).
      
******* Update
        
      Anyone can write if they're listed under =clusterData/editors=.  (Writing new XML will require merging on the
      client, so edits to unaffected starsystems are not lost.)

      =clusterData/owners= can be written to /iff/ user is already present in =owners= list.

      *Rule:* /clusters/$clusterName/editors/$uid exists
      
******* Delete
        
      Only owners can delete.  Delete really just removes "share" links.  When last "share" link is removed, cluster is
      deleted.  So, really, that's two operations: share and delete.  

      *Rule:* newData == null && /clusters/$clusterName/editors/$uid exists

******* Share
        
      Only owners can change sharing.  This is done by writing cluster unique name to receiving
      user's list of clusters.

      *Rule:* newData != null && /users/$targetUid/clusters/$clusterName does not exist.

****** New structure
       :PROPERTIES:
       :CUSTOM_ID: structure-2
       :END:

       - users
         - $uid
           - name
           - email
           - lastLogin
           - (etc.)
           - clusters
             - $clusterUuid
       - usersPublic
         - $uid (read: authenticated; write: $uid === auth.uid)
           - name
       - clusters (metadata)
         - $clusterUuid
           - ".read": /clusters/$clusterUuid/viewers.contains($uid) # For cluster (meta-)data
           - metadata
             - ".write": /clusters/$clusterUuid/editors.contains($uid) # For cluster (meta-)data
             - (various metadata) (name, last editor, write time, notes)
           - owners
             - $userUid: true
           - editors
             - $userUid: true
           - viewers
             - $userUid: true
       - clusterData
         - $clusterUuid
           - xml

*** Use, for creating/deleting clusters by a single user

    Need to cover two cases:

    - generated, not-yet-persisted cluster (no deep link (i.e., parameterized url) possible)
    - persisted cluster (deep link via url parameterization that causes cluster to be loaded as
      observable)

**** Algorithms for simple insertion/deletion of clusters

***** Get list of available cluster id from /users/$uid node and manage insertion/deletion on list

      Event: list updated.  This is either a delete or an insert; no other ops are possible (e.g.,
      data updates, list re-orderings will not generate events here).

      Responses:

****** Insert

       No immediate response.  Insert into uuid-to-cluster map (and raise "next map" event?).
       Subscribe to data changes on new cluster, which will be handled later (see below).

****** Delete

       Remove entry from uuid-to-cluster map.  Raise "next map" event, with updated map as payload.
       Handle "next map" by sorting map values on whatever sort criteria there are into a sorted
       list, and raise "next sorted list" event.  Handle "next sorted list" event by redisplaying
       list on page.

***** DONE Get data for single cluster
      CLOSED: [2017-05-14 Sun 16:53]
      - CLOSING NOTE [2017-05-14 Sun 16:53] \\
        Answer: cannot get updates only for certain children of a node. It's all or nothing.

      Subscribe to cluster data (for whatever reason, but probably as result of DataSnapshot event
      for list of cluster uuids available to user (note that this is not the "next map" event).

      Throttle (debounce, 300 msec?) DataSnapshots for single cluster data.  Respond to event by
      sorting current map and raising "next sorted list" event.  Throttling is because on initial
      load, we subscribe to a bunch of individual clusters simultaneously (unless we can
      subscribe to multiple children with one call?  Answer: no.)

**** Generated Cluster

     Make svc.currentCluster observable, UN-hook it from firebase (if hooked).

**** Persisted Cluster

     Make svc.currentCluster observable, hook it up to firebase (UN-hook first).
*** Use, for sharing clusters between users

    The problem is only the current user can update data in their node, so another user can't just
    insert a new cluster uid into their node.

    Maybe there could be a publicly-writable node at /usersPublic/$uid/incomingClusters?  (Or
    ../sharedClusters?)  *Answer: NO.*  No "push" sharing, otherwise you want up with spam
    clusters.

    Instead, /pull/ sharing.  One makes a cluster world-readable and publicizes it elsewhere.  Or,
    one makes it editable by certain users (how to identify w/non-unique usernames and hidden email
    addresses?) and publicizes that elsewhere.

    So, permissions are:

    - world readable
    - user-writable
    - user-readable

    I think we should drop the concept of "ownership", which has only owners being able to delete
    clusters or change permissions.  Now, editors can change sharing.  Once shared, a cluster can
    never be unshared (only deleted by the user, which may or may not result in the cluster being
    purged, depending on how many other users have access to it).

    Workflow:

    - User A creates a new cluster.  Insertion into public nodes is allowed because no previous data
      exists.  Insert metadata, editors, xml.
    - User A makes cluster readable (by userid after searching for user names?  Since user names are
      not required to be unique, perhaps if there is more than one result in the search, we force
      users to use email addresses (w/out confirmation) -- no, can't be done, because current user
      does not have access to email addresses; maybe give user a choice: grant access to all found
      users or none), maybe writable, by adding user uid to "viewers" or "editors" lists; sends
      cluster uid to user B through a channel outside this program.
    - User B finds cluster by uid (deep link?) and adds it to their list of clusters.
      - If not by deep link, then by an explicit "search" (or uid text-entry field).
    - When any user deletes a cluster, it's removed from their list of clusters, and, if there are
      no other editors, it's purged from the d/b.
      - Note this purge can only be done by an editor, not a viewer.  Furthermore, the editor cannot
        delete a link from another user's personal node.  This matters for viewers, since the editor
        can purge the cluster if he or she is the last editor, but not be able to clean up the
        "hanging reference" in another viewer's personal node.  We'll have to include code to clean
        up a viewer's personal node if it has uids for clusters that no longer exist.

**** Rules for sharing

     Note: change to above scheme: "readers" can read and "writers" can write (but not read).  This
     will simplify data rules (and improve performance), since we won't have to check both "editors"
     and "viewers" to see if someone has read rights, but it makes it incumbent on the app software
     to get it right.

***** New permission scheme

     - /users
       - $uid
         - .read ::  auth.uid == $uid
         - .write ::  auth.uid == $uid
       - public
         - .read ::  true
         - $uid
           - .write ::  auth.uid == $uid
     - /clusters
       - $clusterUid
         - metadata
           - .read ::  root.child('clusterData').child($clusterUid).child('readers').hasChild(auth.uid)
           - .write ::  ! data.exists() ||
                root.child('clusterData').child($clusterUid).child('writers').hasChild(auth.uid)
     - /clusterData
       - $clusterUid
         - data -- Large data such as XML -- *NOTE:* will need transformation to push XML down into data.
           - .read ::  data.parent().parent().child('readers').hasChild(auth.uid)
           - .write :: ! data.exists() || data.parent().parent().child('writers').hasChild(auth.uid)
         - writers -- *NOTE:* We'll have to transform the current "owners" node to "writers".  This
           won't affect anything because no rules use it now.
           - .read ::  data.hasChild(auth.uid) -- Will this work?  Do we even need it?
           - .write :: ! data.exists() ||  data.hasChild(auth.uid)
         - readers
           - .read ::  data.hasChild(auth.uid) -- Will this work?  Do we even need it?
           - .write ::  ! data.exists() || data.parent().child('writers").hasChild(auth.uid) -- This
                is how one user grants permission to another.

***** Old permission scheme (hold on to this for a while)
      
     - /users
       - $uid
         - .read ::  auth.uid == $uid
         - .write ::  auth.uid == $uid
       - public
         - .read ::  true
         - $uid
           - .write ::  auth.uid == $uid
     - /clusters
       - $clusterUid
         - metadata
           - .read ::  root.child('clusterData').child($clusterUid).child('editors').hasChild(auth.uid) ||
                root.child('clusterData').child($clusterUid).child('viewers').hasChild(auth.uid)
           - .write ::  ! data.exists() ||
                root.child('clusterData').child($clusterUid).child('editors').hasChild(auth.uid)
     - /clusterData
       - $clusterUid
         - .read ::  root.child('clusters').child($clusterUid).child('editors').hasChild(auth.uid) ||
              root.child('clusters').child($clusterUid).child('viewers').hasChild(auth.uid)
         - .write :: ! data.exists() ||
              root.child('clusters').child($clusterUid).child('editors').hasChild(auth.uid)
         - editors
           - .read ::  data.hasChild(auth.uid) -- Will this work?  Do we even need it?
           - .write ::  data.hasChild(auth.uid)
         - viewers
           - .read ::  data.hasChild(auth.uid) -- Will this work?  Do we even need it?
           - .write ::  data.parent().child('editors').hasChild(auth.uid) -- This is how one user
                grants permission to another.

**** UI for sharing

***** Send to another user
      
     New tab?  "Share".

     Search for users.  Enter substring, show prefix, then contains.

     User picks recipient.  Gets warning if name is not unique.  What to do (all or none)?

     Role: reader or writer.

     Commit.  Adds given user uid to "readers" or "writers,readers" lists.  (NOTE: add self to both
     writers and readers lists.)

***** Received from another user

      On "Share" tab, explicitly add current cluster to current list.

****** TODO Is there a way to tell ahead of time what the current rights are? i.e., is it possible to tell
       if current cluster is read-only?

***** Special value: world

     Special value: world.  Only role possibility is "reader".

* Events

  [[file:observables.svg][file:observables.svg]]
  
